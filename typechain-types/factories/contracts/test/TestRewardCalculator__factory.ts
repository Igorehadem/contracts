/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestRewardCalculator,
  TestRewardCalculatorInterface,
} from "../../../contracts/test/TestRewardCalculator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_rewardsMax",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_rewardsGiven",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalShares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalAdjustedShares",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "__RewardCalculator_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "end",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsGiven",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsLeft",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsMax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "start",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test_MUL",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "test_calculateGlobalReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_shares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakerWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_talentWeight",
        type: "uint256",
      },
    ],
    name: "test_calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rewards",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_stakerWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_talentWeight",
        type: "uint256",
      },
    ],
    name: "test_calculateTalentShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "test_curvePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "test_integralAt",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "test_periodToPercents",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "test_truncatePeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAdjustedShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161119038038061119083398101604081905261002f9161004a565b60019590955550600292909255600355600455600655610094565b60008060008060008060c0878903121561006357600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6110ed806100a36000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806373cfc519116100b2578063be9a655511610081578063d199053811610066578063d1990538146101f7578063df22296114610200578063efbe1c1c1461021357600080fd5b8063be9a6555146101e4578063bf55bd97146101ed57600080fd5b806373cfc519146101b65780638bc60b8f146101c95780639e20c35e14610160578063a8bc58f2146101dc57600080fd5b80632f0aee18116100ee5780632f0aee181461017e5780633a98ef3914610191578063488500b11461019a5780636a0675cf146101ad57600080fd5b80630154033714610120578063039208531461014d5780631b3ed7221461016057806322b3a6a114610175575b600080fd5b61013361012e366004610d7c565b61021c565b604080519283526020830191909152015b60405180910390f35b61013361015b366004610d2e565b61023a565b6402540be4005b604051908152602001610144565b61016760065481565b61013361018c366004610d2e565b610253565b61016760055481565b6101676101a8366004610cfc565b610260565b61016760045481565b6101676101c4366004610d2e565b610271565b6101676101d7366004610d2e565b610284565b610167610290565b61016760015481565b6101f56102a7565b005b61016760035481565b61016761020e366004610d50565b6103dd565b61016760025481565b60008061022c87878787876103f2565b915091509550959350505050565b600080610247848461044c565b915091505b9250929050565b600080610247848461081d565b600061026b82610a63565b92915050565b600061027d8383610ac1565b9392505050565b600061027d8383610b7a565b60006004546003546102a29190611074565b905090565b600054610100900460ff16158080156102c75750600054600160ff909116105b806102e15750303b1580156102e1575060005460ff166001145b610371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b6000805460ff191660011790558015610394576000805461ff0019166101001790555b80156103da576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60006103ea848484610be7565b949350505050565b600080806402540be4006104068888611074565b61040f8a610c85565b6104199190611016565b6104239190610e3c565b90506000610432828787610be7565b905061043e8183611074565b999098509650505050505050565b600080306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190610d15565b8311158061053e5750306001600160a01b031663efbe1c1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610d15565b8410155b1561062e57306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190610d15565b306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ed57600080fd5b505afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106259190610d15565b9150915061024c565b6000306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b15801561066957600080fd5b505afa15801561067d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a19190610d15565b85106106ad578461071e565b306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e657600080fd5b505afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190610d15565b90506000306001600160a01b031663efbe1c1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075b57600080fd5b505afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610d15565b851161079f5784610810565b306001600160a01b031663efbe1c1c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190610d15565b9196919550909350505050565b6000806000306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190610d15565b306001600160a01b031663efbe1c1c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190610d15565b61090e9190611074565b9050806109235760006001925092505061024c565b6000816402540be400306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b15801561096557600080fd5b505afa158015610979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099d9190610d15565b6109a79089611074565b6109b19190611016565b6109bb9190610e3c565b90506000826402540be400306001600160a01b031663be9a65556040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190610d15565b610a419089611074565b610a4b9190611016565b610a559190610e3c565b919791965090945050505050565b6000816402540be40081610a78600283610f80565b610a829190610f8f565b610a8d600284610f80565b610a979083610f8f565b6003610aa38186610f80565b610aad9190610e0e565b610ab79190611035565b6103ea9190610db7565b6000806000610ad0858561044c565b91509150600080610ae1848461081d565b915091506000610af18383610b7a565b9050306001600160a01b031663d19905386040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190610d15565b610b6e9082611016565b98975050505050505050565b600080610b876000610a63565b610b956402540be400610a63565b610b9f9190611035565b90506000610bac85610a63565b610bb585610a63565b610bbf9190611035565b9050600082610bd36402540be40084610f8f565b610bdd9190610e0e565b9695505050505050565b600080610c01610bfc6402540be40086611016565b610c85565b90506000610c17610bfc6402540be40086611016565b90506000610c258284610df6565b610c346402540be40084611016565b610c3e9190610e3c565b905060006402540be400610c52838a611016565b610c5c9190610e3c565b90506000610c6b60648a610e3c565b905080821015610c79578091505b50979650505050505050565b600081610c9457506000919050565b60038211610ca457506001919050565b60006002610cb3846001610df6565b610cbd9190610e3c565b90508291505b81811015610cf657905080600281610cdb8186610e3c565b610ce59190610df6565b610cef9190610e3c565b9050610cc3565b50919050565b600060208284031215610d0e57600080fd5b5035919050565b600060208284031215610d2757600080fd5b5051919050565b60008060408385031215610d4157600080fd5b50508035926020909101359150565b600080600060608486031215610d6557600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215610d9457600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000808212826001600160ff1b0303841381151615610dd857610dd861108b565b82600160ff1b038412811615610df057610df061108b565b50500190565b60008219821115610e0957610e0961108b565b500190565b600082610e1d57610e1d6110a1565b600160ff1b821460001984141615610e3757610e3761108b565b500590565b600082610e4b57610e4b6110a1565b500490565b80825b6001808611610e625750610e94565b816001600160ff1b0304821115610e7b57610e7b61108b565b80861615610e8857918102915b9490941c938002610e53565b935093915050565b6000828015610eb25760018114610ebc57610ec5565b600191505061026b565b8291505061026b565b5081610ed35750600061026b565b50600160008213808214610eec578015610f0a57610f23565b826001600160ff1b0304831115610f0557610f0561108b565b610f23565b826001600160ff1b0305831215610f2357610f2361108b565b5080831615610f2f5750805b610f3f8360011c83840283610e50565b806001600160ff1b03048211600083131615610f5d57610f5d61108b565b80600160ff1b058212600083121615610f7857610f7861108b565b029392505050565b600061027d60ff841683610e9c565b60006001600160ff1b03600084136000841385830485118282161615610fb757610fb761108b565b600160ff1b6000871286820588128184161615610fd657610fd661108b565b60008712925087820587128484161615610ff257610ff261108b565b878505871281841616156110085761100861108b565b505050929093029392505050565b60008160001904831182151516156110305761103061108b565b500290565b600080831283600160ff1b018312811516156110535761105361108b565b836001600160ff1b0301831381161561106e5761106e61108b565b50500390565b6000828210156110865761108661108b565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220d8db4ce11d96532692ef852a623c916643df1e8563b3c69a3374392460cd368b64736f6c63430008070033";

type TestRewardCalculatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRewardCalculatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRewardCalculator__factory extends ContractFactory {
  constructor(...args: TestRewardCalculatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    _rewardsMax: PromiseOrValue<BigNumberish>,
    _rewardsGiven: PromiseOrValue<BigNumberish>,
    _totalShares: PromiseOrValue<BigNumberish>,
    _totalAdjustedShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestRewardCalculator> {
    return super.deploy(
      _start,
      _end,
      _rewardsMax,
      _rewardsGiven,
      _totalShares,
      _totalAdjustedShares,
      overrides || {}
    ) as Promise<TestRewardCalculator>;
  }
  override getDeployTransaction(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    _rewardsMax: PromiseOrValue<BigNumberish>,
    _rewardsGiven: PromiseOrValue<BigNumberish>,
    _totalShares: PromiseOrValue<BigNumberish>,
    _totalAdjustedShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _start,
      _end,
      _rewardsMax,
      _rewardsGiven,
      _totalShares,
      _totalAdjustedShares,
      overrides || {}
    );
  }
  override attach(address: string): TestRewardCalculator {
    return super.attach(address) as TestRewardCalculator;
  }
  override connect(signer: Signer): TestRewardCalculator__factory {
    return super.connect(signer) as TestRewardCalculator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRewardCalculatorInterface {
    return new utils.Interface(_abi) as TestRewardCalculatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRewardCalculator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestRewardCalculator;
  }
}
