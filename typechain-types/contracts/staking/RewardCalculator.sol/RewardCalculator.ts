/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RewardCalculatorInterface extends utils.Interface {
  functions: {
    "__RewardCalculator_init()": FunctionFragment;
    "end()": FunctionFragment;
    "rewardsGiven()": FunctionFragment;
    "rewardsLeft()": FunctionFragment;
    "rewardsMax()": FunctionFragment;
    "start()": FunctionFragment;
    "totalAdjustedShares()": FunctionFragment;
    "totalShares()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__RewardCalculator_init"
      | "end"
      | "rewardsGiven"
      | "rewardsLeft"
      | "rewardsMax"
      | "start"
      | "totalAdjustedShares"
      | "totalShares"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__RewardCalculator_init",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsGiven",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAdjustedShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__RewardCalculator_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsGiven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardsMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAdjustedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    end(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsGiven(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  __RewardCalculator_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  end(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    __RewardCalculator_init(overrides?: CallOverrides): Promise<void>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsGiven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAdjustedShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
