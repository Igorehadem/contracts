/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Staking {
  export type StakeDataStruct = {
    tokenAmount: PromiseOrValue<BigNumberish>;
    talentAmount: PromiseOrValue<BigNumberish>;
    lastCheckpointAt: PromiseOrValue<BigNumberish>;
    S: PromiseOrValue<BigNumberish>;
    finishedAccumulating: PromiseOrValue<boolean>;
  };

  export type StakeDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tokenAmount: BigNumber;
    talentAmount: BigNumber;
    lastCheckpointAt: BigNumber;
    S: BigNumber;
    finishedAccumulating: boolean;
  };
}

export interface StakingMigrationInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "S()": FunctionFragment;
    "SAt()": FunctionFragment;
    "__RewardCalculator_init()": FunctionFragment;
    "__StableThenToken_init(address)": FunctionFragment;
    "activeStakes()": FunctionFragment;
    "adminWithdraw()": FunctionFragment;
    "calculateEstimatedReturns(address,address,uint256)": FunctionFragment;
    "claimRewards(address)": FunctionFragment;
    "claimRewardsOnBehalf(address,address)": FunctionFragment;
    "convertTalentToToken(uint256)": FunctionFragment;
    "convertTokenToTalent(uint256)": FunctionFragment;
    "convertUsdToTalent(uint256)": FunctionFragment;
    "convertUsdToToken(uint256)": FunctionFragment;
    "disable()": FunctionFragment;
    "disabled()": FunctionFragment;
    "emitRewardsClaimEvent(address,address,uint256,uint256)": FunctionFragment;
    "emitStakeEvent(address,address,uint256,bool)": FunctionFragment;
    "end()": FunctionFragment;
    "factory()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,address,uint256,uint256)": FunctionFragment;
    "maxSForTalent(address)": FunctionFragment;
    "onTransferReceived(address,address,uint256,bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsGiven()": FunctionFragment;
    "rewardsLeft()": FunctionFragment;
    "rewardsMax()": FunctionFragment;
    "setAccumulatedState(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setRealtimeState(uint256,uint256,uint256)": FunctionFragment;
    "setTalentState(address,uint256,uint256)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "setTokenPrice(uint256)": FunctionFragment;
    "stableCoin()": FunctionFragment;
    "stableCoinBalance()": FunctionFragment;
    "stakeAvailability(address)": FunctionFragment;
    "stakeStable(address,uint256)": FunctionFragment;
    "stakes(address,address)": FunctionFragment;
    "start()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapStableForToken(uint256)": FunctionFragment;
    "talentPrice()": FunctionFragment;
    "talentRedeemableRewards(address)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenBalance()": FunctionFragment;
    "tokenPrice()": FunctionFragment;
    "totalAdjustedShares()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalStableStored()": FunctionFragment;
    "totalTokensStaked()": FunctionFragment;
    "transferStake(address,address,(uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "withdrawRewards(address)": FunctionFragment;
    "withdrawTalentRewards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "S"
      | "SAt"
      | "__RewardCalculator_init"
      | "__StableThenToken_init"
      | "activeStakes"
      | "adminWithdraw"
      | "calculateEstimatedReturns"
      | "claimRewards"
      | "claimRewardsOnBehalf"
      | "convertTalentToToken"
      | "convertTokenToTalent"
      | "convertUsdToTalent"
      | "convertUsdToToken"
      | "disable"
      | "disabled"
      | "emitRewardsClaimEvent"
      | "emitStakeEvent"
      | "end"
      | "factory"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "maxSForTalent"
      | "onTransferReceived"
      | "renounceRole"
      | "revokeRole"
      | "rewardsGiven"
      | "rewardsLeft"
      | "rewardsMax"
      | "setAccumulatedState"
      | "setRealtimeState"
      | "setTalentState"
      | "setToken"
      | "setTokenPrice"
      | "stableCoin"
      | "stableCoinBalance"
      | "stakeAvailability"
      | "stakeStable"
      | "stakes"
      | "start"
      | "supportsInterface"
      | "swapStableForToken"
      | "talentPrice"
      | "talentRedeemableRewards"
      | "token"
      | "tokenBalance"
      | "tokenPrice"
      | "totalAdjustedShares"
      | "totalShares"
      | "totalStableStored"
      | "totalTokensStaked"
      | "transferStake"
      | "withdrawRewards"
      | "withdrawTalentRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "S", values?: undefined): string;
  encodeFunctionData(functionFragment: "SAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__RewardCalculator_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__StableThenToken_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "activeStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEstimatedReturns",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsOnBehalf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTalentToToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertTokenToTalent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUsdToTalent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUsdToToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(functionFragment: "disabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emitRewardsClaimEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitStakeEvent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSForTalent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransferReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsGiven",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccumulatedState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRealtimeState",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTalentState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoinBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAvailability",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeStable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapStableForToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "talentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "talentRedeemableRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAdjustedShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStableStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferStake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Staking.StakeDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTalentRewards",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "S", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__RewardCalculator_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__StableThenToken_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEstimatedReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertTalentToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertTokenToTalent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUsdToTalent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUsdToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitRewardsClaimEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitStakeEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSForTalent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTransferReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsGiven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardsMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccumulatedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRealtimeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTalentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stableCoinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapStableForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "talentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "talentRedeemableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAdjustedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStableStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTalentRewards",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RewardClaim(address,address,uint256,uint256)": EventFragment;
    "RewardWithdrawal(address,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Stake(address,address,uint256,bool)": EventFragment;
    "TalentRewardWithdrawal(address,address,uint256)": EventFragment;
    "Unstake(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TalentRewardWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardClaimEventObject {
  owner: string;
  talentToken: string;
  stakerReward: BigNumber;
  talentReward: BigNumber;
}
export type RewardClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RewardClaimEventObject
>;

export type RewardClaimEventFilter = TypedEventFilter<RewardClaimEvent>;

export interface RewardWithdrawalEventObject {
  owner: string;
  talentToken: string;
  stakerReward: BigNumber;
  talentReward: BigNumber;
}
export type RewardWithdrawalEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RewardWithdrawalEventObject
>;

export type RewardWithdrawalEventFilter =
  TypedEventFilter<RewardWithdrawalEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakeEventObject {
  owner: string;
  talentToken: string;
  talAmount: BigNumber;
  stable: boolean;
}
export type StakeEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface TalentRewardWithdrawalEventObject {
  talentToken: string;
  talentTokenWallet: string;
  reward: BigNumber;
}
export type TalentRewardWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  TalentRewardWithdrawalEventObject
>;

export type TalentRewardWithdrawalEventFilter =
  TypedEventFilter<TalentRewardWithdrawalEvent>;

export interface UnstakeEventObject {
  owner: string;
  talentToken: string;
  talAmount: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface StakingMigration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingMigrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    S(overrides?: CallOverrides): Promise<[BigNumber]>;

    SAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __StableThenToken_init(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activeStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateEstimatedReturns(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      _currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stakerRewards: BigNumber;
        talentRewards: BigNumber;
      }
    >;

    claimRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewardsOnBehalf(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertTalentToToken(
      _talent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertTokenToTalent(
      _tal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertUsdToTalent(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertUsdToToken(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disabled(overrides?: CallOverrides): Promise<[boolean]>;

    emitRewardsClaimEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _stakerReward: PromiseOrValue<BigNumberish>,
      _talentReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitStakeEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _talAmount: PromiseOrValue<BigNumberish>,
      _stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    end(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _rewardsMax: PromiseOrValue<BigNumberish>,
      _stableCoin: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _talentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSForTalent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onTransferReceived(
      arg0: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsGiven(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAccumulatedState(
      _activeStakes: PromiseOrValue<BigNumberish>,
      _totalStableStored: PromiseOrValue<BigNumberish>,
      _totalTokensStaked: PromiseOrValue<BigNumberish>,
      _rewardsGiven: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRealtimeState(
      _S: PromiseOrValue<BigNumberish>,
      _SAt: PromiseOrValue<BigNumberish>,
      _totalAdjustedShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTalentState(
      _talent: PromiseOrValue<string>,
      _talentRewards: PromiseOrValue<BigNumberish>,
      _maxSTalent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableCoin(overrides?: CallOverrides): Promise<[string]>;

    stableCoinBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeAvailability(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeStable(
      _talent: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenAmount: BigNumber;
        talentAmount: BigNumber;
        lastCheckpointAt: BigNumber;
        S: BigNumber;
        finishedAccumulating: boolean;
      }
    >;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapStableForToken(
      _stableAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    talentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    talentRedeemableRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStableStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokensStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferStake(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _stake: Staking.StakeDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTalentRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  S(overrides?: CallOverrides): Promise<BigNumber>;

  SAt(overrides?: CallOverrides): Promise<BigNumber>;

  __RewardCalculator_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __StableThenToken_init(
    _stableCoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

  adminWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateEstimatedReturns(
    _owner: PromiseOrValue<string>,
    _talent: PromiseOrValue<string>,
    _currentTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      stakerRewards: BigNumber;
      talentRewards: BigNumber;
    }
  >;

  claimRewards(
    _talent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewardsOnBehalf(
    _owner: PromiseOrValue<string>,
    _talent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertTalentToToken(
    _talent: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertTokenToTalent(
    _tal: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertUsdToTalent(
    _usd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertUsdToToken(
    _usd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disabled(overrides?: CallOverrides): Promise<boolean>;

  emitRewardsClaimEvent(
    _owner: PromiseOrValue<string>,
    _talentToken: PromiseOrValue<string>,
    _stakerReward: PromiseOrValue<BigNumberish>,
    _talentReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitStakeEvent(
    _owner: PromiseOrValue<string>,
    _talentToken: PromiseOrValue<string>,
    _talAmount: PromiseOrValue<BigNumberish>,
    _stable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  end(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    _rewardsMax: PromiseOrValue<BigNumberish>,
    _stableCoin: PromiseOrValue<string>,
    _factory: PromiseOrValue<string>,
    _tokenPrice: PromiseOrValue<BigNumberish>,
    _talentPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSForTalent(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onTransferReceived(
    arg0: PromiseOrValue<string>,
    _sender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

  setAccumulatedState(
    _activeStakes: PromiseOrValue<BigNumberish>,
    _totalStableStored: PromiseOrValue<BigNumberish>,
    _totalTokensStaked: PromiseOrValue<BigNumberish>,
    _rewardsGiven: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRealtimeState(
    _S: PromiseOrValue<BigNumberish>,
    _SAt: PromiseOrValue<BigNumberish>,
    _totalAdjustedShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTalentState(
    _talent: PromiseOrValue<string>,
    _talentRewards: PromiseOrValue<BigNumberish>,
    _maxSTalent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableCoin(overrides?: CallOverrides): Promise<string>;

  stableCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

  stakeAvailability(
    _talent: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeStable(
    _talent: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      tokenAmount: BigNumber;
      talentAmount: BigNumber;
      lastCheckpointAt: BigNumber;
      S: BigNumber;
      finishedAccumulating: boolean;
    }
  >;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapStableForToken(
    _stableAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  talentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  talentRedeemableRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalStableStored(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferStake(
    _owner: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _stake: Staking.StakeDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRewards(
    _talent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTalentRewards(
    _talent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    S(overrides?: CallOverrides): Promise<BigNumber>;

    SAt(overrides?: CallOverrides): Promise<BigNumber>;

    __RewardCalculator_init(overrides?: CallOverrides): Promise<void>;

    __StableThenToken_init(
      _stableCoin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdraw(overrides?: CallOverrides): Promise<void>;

    calculateEstimatedReturns(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      _currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stakerRewards: BigNumber;
        talentRewards: BigNumber;
      }
    >;

    claimRewards(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRewardsOnBehalf(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    convertTalentToToken(
      _talent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTokenToTalent(
      _tal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUsdToTalent(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUsdToToken(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disable(overrides?: CallOverrides): Promise<void>;

    disabled(overrides?: CallOverrides): Promise<boolean>;

    emitRewardsClaimEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _stakerReward: PromiseOrValue<BigNumberish>,
      _talentReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitStakeEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _talAmount: PromiseOrValue<BigNumberish>,
      _stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _rewardsMax: PromiseOrValue<BigNumberish>,
      _stableCoin: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _talentPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSForTalent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTransferReceived(
      arg0: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

    setAccumulatedState(
      _activeStakes: PromiseOrValue<BigNumberish>,
      _totalStableStored: PromiseOrValue<BigNumberish>,
      _totalTokensStaked: PromiseOrValue<BigNumberish>,
      _rewardsGiven: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRealtimeState(
      _S: PromiseOrValue<BigNumberish>,
      _SAt: PromiseOrValue<BigNumberish>,
      _totalAdjustedShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTalentState(
      _talent: PromiseOrValue<string>,
      _talentRewards: PromiseOrValue<BigNumberish>,
      _maxSTalent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stableCoin(overrides?: CallOverrides): Promise<string>;

    stableCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAvailability(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeStable(
      _talent: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        tokenAmount: BigNumber;
        talentAmount: BigNumber;
        lastCheckpointAt: BigNumber;
        S: BigNumber;
        finishedAccumulating: boolean;
      }
    >;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapStableForToken(
      _stableAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    talentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    talentRedeemableRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStableStored(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferStake(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _stake: Staking.StakeDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewards(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawTalentRewards(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RewardClaim(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      stakerReward?: null,
      talentReward?: null
    ): RewardClaimEventFilter;
    RewardClaim(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      stakerReward?: null,
      talentReward?: null
    ): RewardClaimEventFilter;

    "RewardWithdrawal(address,address,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      stakerReward?: null,
      talentReward?: null
    ): RewardWithdrawalEventFilter;
    RewardWithdrawal(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      stakerReward?: null,
      talentReward?: null
    ): RewardWithdrawalEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Stake(address,address,uint256,bool)"(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      talAmount?: null,
      stable?: null
    ): StakeEventFilter;
    Stake(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      talAmount?: null,
      stable?: null
    ): StakeEventFilter;

    "TalentRewardWithdrawal(address,address,uint256)"(
      talentToken?: PromiseOrValue<string> | null,
      talentTokenWallet?: PromiseOrValue<string> | null,
      reward?: null
    ): TalentRewardWithdrawalEventFilter;
    TalentRewardWithdrawal(
      talentToken?: PromiseOrValue<string> | null,
      talentTokenWallet?: PromiseOrValue<string> | null,
      reward?: null
    ): TalentRewardWithdrawalEventFilter;

    "Unstake(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      talAmount?: null
    ): UnstakeEventFilter;
    Unstake(
      owner?: PromiseOrValue<string> | null,
      talentToken?: PromiseOrValue<string> | null,
      talAmount?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    S(overrides?: CallOverrides): Promise<BigNumber>;

    SAt(overrides?: CallOverrides): Promise<BigNumber>;

    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __StableThenToken_init(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activeStakes(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateEstimatedReturns(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      _currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewardsOnBehalf(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertTalentToToken(
      _talent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertTokenToTalent(
      _tal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUsdToTalent(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUsdToToken(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disabled(overrides?: CallOverrides): Promise<BigNumber>;

    emitRewardsClaimEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _stakerReward: PromiseOrValue<BigNumberish>,
      _talentReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitStakeEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _talAmount: PromiseOrValue<BigNumberish>,
      _stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _rewardsMax: PromiseOrValue<BigNumberish>,
      _stableCoin: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _talentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSForTalent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTransferReceived(
      arg0: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsGiven(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsMax(overrides?: CallOverrides): Promise<BigNumber>;

    setAccumulatedState(
      _activeStakes: PromiseOrValue<BigNumberish>,
      _totalStableStored: PromiseOrValue<BigNumberish>,
      _totalTokensStaked: PromiseOrValue<BigNumberish>,
      _rewardsGiven: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRealtimeState(
      _S: PromiseOrValue<BigNumberish>,
      _SAt: PromiseOrValue<BigNumberish>,
      _totalAdjustedShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTalentState(
      _talent: PromiseOrValue<string>,
      _talentRewards: PromiseOrValue<BigNumberish>,
      _maxSTalent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableCoin(overrides?: CallOverrides): Promise<BigNumber>;

    stableCoinBalance(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAvailability(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeStable(
      _talent: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapStableForToken(
      _stableAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    talentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    talentRedeemableRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdjustedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStableStored(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferStake(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _stake: Staking.StakeDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTalentRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    S(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __RewardCalculator_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __StableThenToken_init(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activeStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateEstimatedReturns(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      _currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardsOnBehalf(
      _owner: PromiseOrValue<string>,
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertTalentToToken(
      _talent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertTokenToTalent(
      _tal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUsdToTalent(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUsdToToken(
      _usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitRewardsClaimEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _stakerReward: PromiseOrValue<BigNumberish>,
      _talentReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitStakeEvent(
      _owner: PromiseOrValue<string>,
      _talentToken: PromiseOrValue<string>,
      _talAmount: PromiseOrValue<BigNumberish>,
      _stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      _rewardsMax: PromiseOrValue<BigNumberish>,
      _stableCoin: PromiseOrValue<string>,
      _factory: PromiseOrValue<string>,
      _tokenPrice: PromiseOrValue<BigNumberish>,
      _talentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSForTalent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTransferReceived(
      arg0: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsGiven(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccumulatedState(
      _activeStakes: PromiseOrValue<BigNumberish>,
      _totalStableStored: PromiseOrValue<BigNumberish>,
      _totalTokensStaked: PromiseOrValue<BigNumberish>,
      _rewardsGiven: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRealtimeState(
      _S: PromiseOrValue<BigNumberish>,
      _SAt: PromiseOrValue<BigNumberish>,
      _totalAdjustedShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTalentState(
      _talent: PromiseOrValue<string>,
      _talentRewards: PromiseOrValue<BigNumberish>,
      _maxSTalent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableCoinBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeAvailability(
      _talent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeStable(
      _talent: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapStableForToken(
      _stableAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    talentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    talentRedeemableRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAdjustedShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStableStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokensStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferStake(
      _owner: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _stake: Staking.StakeDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTalentRewards(
      _talent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
